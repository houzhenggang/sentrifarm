#!/bin/sh /etc/rc.common

EXTRA_COMMANDS="again"
EXTRA_HELP="again   Run again"
START=98
STOP=98

boot() {
logger "Setup i2c RTC"
echo ds1307 0x68 > '/sys/class/i2c-dev/i2c-0/device/new_device'

logger "Setup i2c EEPROM"
echo 24c32  0x50 > '/sys/class/i2c-dev/i2c-0/device/new_device'

logger "Setup i2c Barometer"
echo bmp085 0x77 > '/sys/class/i2c-dev/i2c-0/device/new_device'

# Carambola2 Pins:
#
# GPIO16 : phys J12 pin 2  : (LED6) -- note needs to be LOW at boot
# GPIO17 : phys J12 pin 1  : spi0.1 (SX1276) CS 
#   -- note needs to be HI at boot, which is OK because we need to pull this high anyway via 10k resistor to boot!

# GPIO11 : phys J12 pin 8  : {UART RTS, default: WPS input button}
# GPIO12 : phys J12 pin 9  : {UART CTS, LOW at boot}

# GPIO15 : phys J12 pin 3  : (LED4) - needs to be LOW at boot
# GPIO14 : phys J12 pin 4  : (LED3) - ETH1 LED
# GPIO13 : phys J12 pin 5  : (LED2) - ETH0 LED
# GPIO1  : phys J12 pin 6  : (LED1) - WLAN LED2 ?
# GPIO0  : phys J12 pin 7  : (LED0) - WLAN LED1

# GPIO18 : phys J12 pin 10 : i2c SDA  
# GPIO19 : phys J12 pin 11 : i2c SCL
# GPIO20 : phys J12 pin 12 : 1-Wire
# GPIO21 : phys J12 pin 13 :  spi0.2 CS

# 2,3,4,5 : used for SPI FLASH
# 9,10 : used for USB serial from PC

# spare (was: GPIO21 : SCK)
# spare (was: GPIO22 : MOSI)
# spare (was: GPIO23 : MISO)

# MISO   : phys J13 pin 14 :  spi0 MISO
# MOSI   : phys J13 pin 13 :  spi0 MOSI - note, C2 datasheet says needs to be pulled to ?
# SCK    : phys J13 pin 12 :  spi0 CLK  - pulled down via 10k resistor
# 

# Raspberry Pi Pins:
# Pin 2,4 = 5V pin 6, 9, 14, 20, 25 = GND 25 = next to video out, 26 = outside edge, 2,4 = outer top corner of board
# Pint 1,17 = 3v3
#
# MOSI   : phys P1 pin 19 gpio 10 : spi0 MOSI
# MISO   : phys P1 pin 21 gpio 9  : spi0 MISO
# SCK    : phys P1 pin 23 gpio 11 : spi0 SCLK
# CS     : phys P1 pin 26 gpio X  : spi0 CE1   <-- not CE0, because spidev0.0 wont match spidev0.1 on the c2
#
# MISO   : phys P1 pin 3 gpio 0   : spi0 I2C SDA
# SCK    : phys P1 pin 5 gpio 1   : spi0 I2C SCL
#
# TX     : phys P1 pin 8 gpio 14  : serial TX
# RX     : phys P1 pin 10 gpio 15 : serial RX
#
# GPIO4  : phys P1 pin 7 gpio 4   : SX1276 RESET
# GPIO27 : phys P1 pin 13 gpio 27 : LED4 <-- some raspberry pi doco has this called GPIO21
# GPIO25 : phys P1 pin 22 gpio 25 : 1-wire
# GPIO24 : phys P1 pin 18 gpio 24 : Use for beacon mode


MACHINE_X=`egrep ^machine /proc/cpuinfo|cut -c 13-`
MACHINE_Y=`egrep ^Hardware /proc/cpuinfo |cut -c 12-`


logger "Setup GPIO for ${MACHINE_X:+${MACHINE_X}}${MACHINE_X:-${MACHINE_Y}}"

if [ "$MACHINE_X" = "8devices Carambola2 board" ] ; then

# GPIO17 is hard coded into the platform init SPI device CS - file: patches/0001-SPI0.1-and-0.2-with-GPIO-CS.patch

# Extra LED on LED4 / dev phys pin 2 / gpio 15
# Reversed: 1 = off, 0 = on
echo 15 > /sys/class/gpio/export
echo out > /sys/class/gpio/gpio15/direction
sleep 1
echo 0 > /sys/class/gpio/gpio15/value

# Why was 16 already enabled ?!?
echo 1 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio1/direction
sleep 1

ls -l /sys/class/gpio

# If Carambola2 : Physical PIN 6: short to 3v3 to get BEACON MODE

X=`cat /sys/class/gpio/gpio1/value`
if [ "$X" == "1" ] ; then
  logger "GPIO1 == HIGH. ENTER BEACON MODE"
fi

else

# Assume raspberry pi

echo 1 > /sys/class/leds/led0/brightness   # <-- note, this only flashes it due to mmc trigger
echo 1 > /sys/class/leds/led0/brightness   # <-- note, this only flashes it due to mmc trigger

echo 24 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio24/direction
sleep 1

# Pin 18
X=`cat /sys/class/gpio/gpio24/value`
if [ "$X" == "1" ] ; then
  logger "GPIO24 == HIGH. ENTER BEACON MODE"
fi

fi

# 1-wire

# This sets the time if the network is missing.
# We let NTP take over later anyway

# (Alternative: check NVRAM is not aaaaaa)

# If the battery was replaced, we cant do much until after the user or NTP cron sets it
if hwclock | grep 'Jan' | grep -q 2000 ; then
  logger "RTC appears to have a flat battery..."
  echo timer > /sys/class/leds/carambola2\:green\:wlan/trigger
  echo 50 > /sys/class/leds/carambola2\:green\:wlan/delay_on
  echo 2450 > /sys/class/leds/carambola2\:green\:wlan/delay_off
else
  logger "RTC set hwclock"
  # hwclock -s <== set systime from hwtime (not after NTP starts though)
  # hwclock -w <== set RTC from systime
  hwclock -s
  echo heartbeat > /sys/class/leds/carambola2\:green\:wlan/trigger
fi

logger "Air Pressure: `cat /sys/bus/i2c/drivers/bmp085/0-0077/pressure0_input`"
logger "Air Temp: `cat /sys/bus/i2c/drivers/bmp085/0-0077/temp0_input`"
logger "DS18B20: `cat /sys/bus/w1/devices/28-0314630d0eff/w1_slave`"
logger "RTC: `hwclock -r`"
logger "Date: `date`"

sx1276_dump_regs /dev/spidev0.1 | logger

}

again() {
boot
}

